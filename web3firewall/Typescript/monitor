/**
 * ------------------------------------------------------------
 * Web3Firewall — Ethereum Address Risk Monitor (v1.1, TypeScript)
 * ------------------------------------------------------------
 *
 * This script fetches transactions to a specified Ethereum address
 * within a given time window (in hours) using the Etherscan API,
 * and submits them to Web3Firewall's threat intelligence API.
 *
 * INSTRUCTIONS:
 *
 * 1. Set your API keys and constants below.
 * 2. Run from terminal:
 *    ts-node monitor.ts <ethereum_address> <lookback_hours>
 *
 * Get a free Etherscan API key at:
 *    https://etherscan.io/myapikey
 *
 * Learn more or upgrade:
 *    https://web3firewall.xyz
 * ------------------------------------------------------------
 */

import axios from 'axios';
import { ethers } from 'ethers';

// === SET YOUR API KEYS HERE ===
const ETHERSCAN_API_KEY = 'YOUR_ETHERSCAN_API_KEY_HERE';
const WEB3FIREWALL_TOKEN = 'YOUR_WEB3FIREWALL_BEARER_TOKEN_HERE';

// === STATIC CONFIGURATION ===
const WEB3FIREWALL_API_URL = 'https://api.web3firewall.io/api/v1/policy/event';

// === DO NOT MODIFY BELOW THIS LINE ===

async function fetchTransactions(address: string, cutoffTimestamp: number) {
  const url = `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=desc&apikey=${ETHERSCAN_API_KEY}`;

  try {
    const res = await axios.get(url);
    if (res.data.status !== '1' || !res.data.result) {
      console.error('No transactions found or API error:', res.data.message);
      return [];
    }

    return res.data.result.filter((tx: any) =>
      tx.to?.toLowerCase() === address.toLowerCase() && parseInt(tx.timeStamp) >= cutoffTimestamp
    );
  } catch (err) {
    console.error('Error fetching transactions:', err);
    return [];
  }
}

async function sendToWeb3Firewall(tx: any) {
  const txTime = new Date(parseInt(tx.timeStamp) * 1000).toISOString();

  const r = tx.r || '0x0';
  const s = tx.s || '0x0';
  let v = tx.v || '0x0';
  if (!v.startsWith('0x')) {
    v = '0x' + parseInt(v).toString(16);
  }

  const body = {
    kind: 'transaction:broadcasted',
    datetime: txTime,
    data: {
      network: 'eth',
      from: tx.from,
      to: tx.to,
      nonce: parseInt(tx.nonce),
      value: tx.value,
      data: tx.input,
      gasLimit: '0x' + parseInt(tx.gas).toString(16),
      gasPrice: '0x' + parseInt(tx.gasPrice).toString(16),
      r: r,
      s: s,
      yParityOrV: v
    }
  };

  try {
    const res = await axios.post(WEB3FIREWALL_API_URL, body, {
      headers: {
        Authorization: `Bearer ${WEB3FIREWALL_TOKEN}`,
        'Content-Type': 'application/json'
      }
    });
    console.log(`${tx.hash} → Risk Response:`, res.data);
  } catch (err) {
    console.error(`Failed to send ${tx.hash} to Web3Firewall:`, err);
  }
}

async function main() {
  const args = process.argv.slice(2);
  if (args.length < 2) {
    console.error('Usage: ts-node monitor.ts <ethereum_address> <lookback_hours>');
    process.exit(1);
  }

  const address = args[0].toLowerCase();
  const hours = parseInt(args[1]);
  const cutoffTimestamp = Math.floor(Date.now() / 1000) - hours * 3600;

  console.log(`Scanning ${address} for the last ${hours} hours...`);

  const transactions = await fetchTransactions(address, cutoffTimestamp);
  console.log(`\nFound ${transactions.length} transactions to ${address}.\n`);

  for (const tx of transactions) {
    await sendToWeb3Firewall(tx);
  }
}

main();
